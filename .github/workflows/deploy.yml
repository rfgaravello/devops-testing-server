name: Deploy to AWS ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-2
      ECR_REGISTRY: 555901236716.dkr.ecr.ap-southeast-2.amazonaws.com
      ECR_REPOSITORY: devops-demo
      IMAGE_TAG: ${{ github.run_number }}
      S3_BUCKET: 555901236716deploybkt

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6
  
      - name: Terraform Init
        run: terraform init
        working-directory: infra
  
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: infra

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create ECS task definition template
        run: |
          cat <<EOF > taskdef.json
          {
            "family": "devops-app-task",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "devops-app",
                "image": "<IMAGE>",
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "protocol": "tcp"
                  }
                ],
                "essential": true
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::555901236716:role/ecsTaskExecutionRole"
          }
          EOF

      - name: Register new ECS task definition
        run: |
          sed "s|<IMAGE>|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|" taskdef.json > new-taskdef.json
          aws ecs register-task-definition --cli-input-json file://new-taskdef.json > output.json
          TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' output.json)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create AppSpec file
        run: |
          cat <<EOF > appspec.yaml
          version: 1
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: $TASK_DEF_ARN
                  LoadBalancerInfo:
                    ContainerName: devops-app
                    ContainerPort: 3000
          EOF

      - name: Upload AppSpec to S3
        run: |
          aws s3 cp appspec.yaml s3://$S3_BUCKET/appspec.yaml

      - name: Deploy with CodeDeploy (Blue/Green)
        run: |
          aws deploy create-deployment \
            --application-name devops-codedeploy-app \
            --deployment-group-name devops-app-deploy-group \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --s3-location bucket=$S3_BUCKET,bundleType=YAML,key=appspec.yml \
            


